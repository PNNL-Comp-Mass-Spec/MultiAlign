/*////////////////////////////////////////////////////////////////////////
 *  File  :  frmMain.cs
 *  Author: Navdeep Jaitly, Ashoka Polpitya, Brian LaMarche
 *  Date  : March, 2006
 * 
 *  Pacific Northwest National Laboratory
 *  Instrument Development Laboratory
 * 
 *  Notes:
 *      Handles main user interaction for starting new or loading 
 *      old analysis files.
 * 
 *  Revisions:
 *      3-18-2008
 *          Gave the MDI Main form a new look by using an autogenerated
 *          style and then adapting the old main form to this.
 */
///////////////////////////////////////////////////////////////////////	
using System;
using System.Data;
using System.Text;
using System.Drawing;
using System.Threading; 
using System.Windows.Forms;
using System.ComponentModel;
using System.Collections.Generic;

using MultiAlignWin.Diagnostics;
using PNNLProteomics.Data.Analysis;

namespace MultiAlignWin.UI
{
    /// <summary>
    /// Part of the class, with user interface logic for the MultiAlign Application.
    /// </summary>
    public partial class frmMdiMain : Form
    {
         

        /// <summary>
        /// Status form for visual progress updates to user.
        /// </summary>
        private frmStatus mfrm_status;

        /// <summary>
        /// Main analysis object (current one.)
        /// </summary>
        private clsMultiAlignAnalysis mobjAnalysis;

        /// <summary>
        /// Current analysis filename operating on.
        /// </summary>
        private string mstrCurrentFileName; 

        public frmMdiMain()
        {
            // Reduce the amount of flicker that occurs when windows are redocked within
            // the container. As this prevents unsightly backcolors being drawn in the
            // WM_ERASEBACKGROUND that seems to occur.
            SetStyle(ControlStyles.DoubleBuffer, true);
            SetStyle(ControlStyles.AllPaintingInWmPaint, true);

            // Required for Windows Form Designer support
            InitializeComponent();
            Init();


            UpdateStatusLabel("Loading...");
            Load += new EventHandler(frmMdiMain_Load);

            UpdateStatusLabel("Ready.");
            clsLogging.DebugLevel = DebugLevel.MAJOR;
            clsLogging.Trace(DebugLevel.MAJOR, "MultiAlign Loaded.");
        }

        /// <summary>
        /// Updates the status label.
        /// </summary>
        /// <param name="message"></param>
        private void UpdateStatusLabel(string message)
        {
            toolStripStatusLabel.Text = message;
        }

        /// <summary>
        /// Handles when the main form loads so that we can setup the UI for the user.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void frmMdiMain_Load(object sender, EventArgs e)
        {
            //WindowState = FormWindowState.Maximized;
            
            /// 
            /// Get and display the version number to the screen
            /// 
            System.Reflection.Assembly assembly         = System.Reflection.Assembly.GetExecutingAssembly();
            System.Reflection.AssemblyName assemblyName = assembly.GetName();
            string versionString                        = assemblyName.Version.ToString();

            Text = string.Format("MultiAlign [v.{0}]", versionString);
        }

        /// <summary>
        /// Initializes other class level variables to be initialized the same way across multiple constructors. 
        /// </summary>
        private void Init()
        {
            mfrm_status = new frmStatus();

            /// 
            /// This allows for the child MDI forms to keep their menu items in their own little windows.
            /// 
            MainMenuStrip.AllowMerge = true;               
        }
        
        #region MDI Window Handlers
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            mainToolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }
        #endregion


        /// <summary>
        /// Handles when the user clicks to start a new analysis by displaying the wizard to them.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void PerformAnalysis(object sender, EventArgs e)
        {            
            frmAnalysisWizard analysisWizard    = new frmAnalysisWizard();
            if (analysisWizard.ShowDialog(this) == DialogResult.OK)
            {
                frmDataView dataView = new frmDataView();
                dataView.Analysis        = analysisWizard.MultiAlignAnalysis;
                dataView.Text = "Data View for: " + analysisWizard.MultiAlignAnalysis.AnalysisName;
                dataView.MdiParent = this;                
                dataView.Show();
            }

            analysisWizard.Dispose();
        }


        /// <summary>
        /// Adds the current analysis object to the UI by creating a new dataview for the analysis object.
        /// </summary>
        private void AddCurrentAnalysis()
        {
            if (mobjAnalysis != null)
            {
                /// 
                /// Force a cleanup of managed objects.  This should help reduce 
                /// any extraneous garbage.
                /// 
                GC.Collect();

                frmDataView dataView = new frmDataView();
                dataView.Text = "Data View for: " + mobjAnalysis.AnalysisName;
                dataView.CurrentFileName = mstrCurrentFileName;
                dataView.Analysis = mobjAnalysis;
                dataView.MdiParent = this;
                dataView.Show();
            }
        }

        /// <summary>
        /// Invokable status form hider method.
        /// </summary>
        private void InvokeHideStatus()
        {
            mfrm_status.Hide();
        }

        /// <summary>
        /// Handles the user click to load a MultiAlign analysis file.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void LoadAnalysis(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            openFileDialog1.Multiselect = false;
            openFileDialog1.Filter = "*.MultiAlign files (*.mln)|*.mln";
            openFileDialog1.FilterIndex = 1;
            openFileDialog1.RestoreDirectory = true;

            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                clsLogging.Trace(DebugLevel.MAJOR, "Loading analysis.");
                mstrCurrentFileName = openFileDialog1.FileName;
                System.Threading.ThreadStart tStart = new ThreadStart(LoadMLNFile);
                System.Threading.Thread loadThread = new System.Threading.Thread(tStart);
                loadThread.Start();

                /// 
                /// If cancel then abort the thread!
                /// 
                if (mfrm_status.ShowDialog() == DialogResult.Cancel)
                {
                    try
                    {
                        loadThread.Abort();
                    }
                    catch(ThreadAbortException ex)
                    {
                        Console.WriteLine("Aborted dataset loading.  " + ex.Message);
                    }
                }
            }
        }

        /// <summary>
        /// Loads a previously saved .mln analysis file.
        /// </summary>
        private void LoadMLNFile()
        {

            clsLogging.Trace(DebugLevel.MAJOR, "Loading analysis file.");
            clsMultiAlignAnalysis.ProgressChanged +=
                new clsMultiAlignAnalysis.DelegateProgressChangedEventHandler
                (clsMultiAlignAnalysis_ProgressChanged);
            mobjAnalysis = clsMultiAlignAnalysis.DeserializeAnalysisFromFile(mstrCurrentFileName);
            Invoke(new MethodInvoker(InvokeHideStatus)); // mfrm_status.Hide(); 
            Invoke(new MethodInvoker(AddCurrentAnalysis));
        }

        /// <summary>
        /// Handles when the user clicks to create a new analysis parameter file.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void CreateAnalysisParameterFile(object sender, EventArgs e)
        {
            frmAnalysisWizard analysisWizard = new frmAnalysisWizard(enmAnalysisType.CREATE_PARAMETER_FILE);
            if (analysisWizard.ShowDialog(this) == DialogResult.OK)
            {
                /// Create the parameter file here!	
                SaveFileDialog dialog = new SaveFileDialog();
                dialog.Title = "Save Parameter File";
                dialog.Filter = "*.xml files (*.xml)|*.xml";
                dialog.FilterIndex = 1;
                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    analysisWizard.MultiAlignAnalysis.SaveParametersToFile(dialog.FileName);
                }
            }		
        }

        /// <summary>
        /// Handles progress updates from the loading thread or the analysis thread for user progress updates.
        /// </summary>
        /// <param name="o"></param>
        /// <param name="progress"></param>
        /// <param name="message"></param>
        private void clsMultiAlignAnalysis_ProgressChanged(object o, int progress, string message)
        {
            if (mfrm_status.mevntPercentComplete != null)
                mfrm_status.mevntPercentComplete(progress);
            if (mfrm_status.mevntStatusMessage != null)
                mfrm_status.mevntStatusMessage(0, message);
        }

        /// <summary>
        /// Displays the about form to the user.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmAbout mfrmAbout = new frmAbout();
            mfrmAbout.Show();
        }

        private void reportABugOrFeatureToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmTracWebBugReport mfrmTracWeb = new frmTracWebBugReport();
            mfrmTracWeb.Show();
        }
        protected override void OnMdiChildActivate(EventArgs e)
        {
            ToolStripManager.RevertMerge(this.mainToolStrip);
            base.OnMdiChildActivate(e);
        }
    }
}
