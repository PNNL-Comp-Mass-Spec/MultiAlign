/*////////////////////////////////////////////////////////////////////////
 *  File  :  frmMain.cs
 *  Author: Navdeep Jaitly, Ashoka Polpitya, Brian LaMarche
 *  Date  : March, 2006
 * 
 *  Pacific Northwest National Laboratory
 *  Instrument Development Laboratory
 * 
 *  Notes:
 *      Handles main user interaction for starting new or loading 
 *      old analysis files.
 * 
 *  Revisions:
 *      3-18-2008
 *          Gave the MDI Main form a new look by using an autogenerated
 *          style and then adapting the old main form to this.
 */
///////////////////////////////////////////////////////////////////////	
using System;
using System.Data;
using System.Text;
using System.Drawing;
using System.Threading; 
using System.Windows.Forms;
using System.ComponentModel;
using System.Collections.Generic;
using MultiAlignCore.MultiAlign;
using MultiAlignCore.IO;
using MultiAlignWin.Diagnostics;
using MultiAlignCore.Data;

namespace MultiAlignWin.UI
{
    /// <summary>
    /// Part of the class, with user interface logic for the MultiAlign Application.
    /// </summary>
    public partial class frmMdiMain : Form
    {
        private delegate void DelegateAnalysisLoaded(MultiAlignAnalysis analysis);

        #region Members
        /// <summary>
        /// Status form for visual progress updates to user.
        /// </summary>
        private frmStatus m_statusForm;
        /// <summary>
        /// Current analysis filename operating on.
        /// </summary>
        private string m_currentAnalysisFileName;
        /// <summary>
        /// List of analysis data view forms that are open.
        /// </summary>
        private List<DataView> m_dataViews;
        #endregion

        /// <summary>
        /// Default constructor.
        /// </summary>
        public frmMdiMain()
        {
            // Reduce the amount of flicker that occurs when windows are redocked within
            // the container. As this prevents unsightly backcolors being drawn in the
            // WM_ERASEBACKGROUND that seems to occur.
            SetStyle(ControlStyles.DoubleBuffer, true);
            SetStyle(ControlStyles.AllPaintingInWmPaint, true);

            InitializeComponent();
            
            m_statusForm = new frmStatus();
            m_dataViews  = new List<DataView>();

            /// 
            /// This allows for the child MDI forms to keep their menu items in their own little windows.
            /// 
            MainMenuStrip.AllowMerge = true; 
            Load                    += new EventHandler(MainWindowLoad);
            
            clsLogging.DebugLevel = DebugLevel.MAJOR;
            clsLogging.Trace(DebugLevel.MAJOR, "MultiAlign Loaded.");
        }

        #region Performing Analysis
        /// <summary>
        /// Handles when the user clicks to start a new analysis by displaying the wizard to them.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void PerformAnalysis(object sender, EventArgs e)
        {            
            frmAnalysisWizard analysisWizard     = new frmAnalysisWizard();
            analysisWizard.Icon                  = Icon;
            analysisWizard.StartPosition         = FormStartPosition.CenterParent;
            analysisWizard.AnalysisComplete     += new EventHandler<AnalysisCompleteEventArgs>(analysisWizard_AnalysisComplete);
            analysisWizard.AnalysisError        += new EventHandler<AnalysisErrorEventArgs>(analysisWizard_AnalysisError);
            analysisWizard.Show(this);            
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void analysisWizard_AnalysisError(object sender, AnalysisErrorEventArgs e)
        {
            MessageBox.Show("There was an error during the analysis. " + e.ErrorMessage + ". " + e.Exception.Message);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void analysisWizard_AnalysisComplete(object sender, AnalysisCompleteEventArgs e)
        {
            AddAnalysis(e.Analysis);
         
            Form f = sender as Form;
            if (sender != null)
            {
                f.Dispose();
            }
        }
        /// <summary>
        /// Invokable status form hider method.
        /// </summary>
        private void InvokeHideStatus()
        {
            m_statusForm.Hide();
        }
        /// <summary>
        /// Adds the current analysis object to the UI by creating a new dataview for the analysis object.
        /// </summary>
        private void AddAnalysis(MultiAlignAnalysis analysis)
        {
            try
            {
                if (analysis != null)
                {
                    DataView dataView = new DataView();
                    dataView.Text = "Data View for: " + analysis.MetaData.AnalysisName;
                    dataView.SetAnalysis(analysis);
                    dataView.Icon = Icon;
                    dataView.MdiParent = this;
                    dataView.FormClosed += new FormClosedEventHandler(dataView_FormClosed);
                    dataView.Show();


                    m_dataViews.Add(dataView);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Could not load the analysis. " + ex.Message);                
            }
        }
        #endregion

        #region Data View Form Handlers
        /// <summary>
        /// Handles when an analysis form is closed.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void dataView_FormClosed(object sender, FormClosedEventArgs e)
        {
            m_dataViews.Remove(sender as DataView);
        }
        #endregion

        #region Reading and Writing Analysis Files.
        /// <summary>
        /// Handles the user click to load a MultiAlign analysis file.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void LoadAnalysis(object sender, EventArgs e)
        {
            using (OpenFileDialog analysisOpenFileDialog = new OpenFileDialog())
            {
                analysisOpenFileDialog.Multiselect = false;
                analysisOpenFileDialog.Filter = "*.MultiAlign files (*.mln)|*.mln";
                analysisOpenFileDialog.FilterIndex = 1;
                analysisOpenFileDialog.RestoreDirectory = true;

                if (analysisOpenFileDialog.ShowDialog() == DialogResult.OK)
                {
                    clsLogging.Trace(DebugLevel.MAJOR, "Loading analysis.");
                    m_currentAnalysisFileName   = analysisOpenFileDialog.FileName;
                    ThreadStart tStart          = new ThreadStart(LoadMLNFile);
                    Thread loadThread           = new System.Threading.Thread(tStart);
                    loadThread.Start();

                    if (m_statusForm.ShowDialog() == DialogResult.Cancel)
                    {
                        try
                        {
                            loadThread.Abort();
                        }
                        catch (ThreadAbortException)
                        {

                        }
                    }
                }
            }
        }

        /// <summary>
        /// Loads a previously saved .mln analysis file.
        /// </summary>
        private void LoadMLNFile()
        {
            bool fileLoaded = false;

            clsLogging.Trace(DebugLevel.MAJOR, "Loading analysis file.");            
            MultiAlignAnalysis analysis = null;

            try
            {
                AnalysisBinaryReader reader     = new AnalysisBinaryReader();
                reader.Progress                 += new EventHandler<IOProgressEventArgs>(reader_Progress);
                analysis                        = reader.ReadAnalysis(m_currentAnalysisFileName);
                fileLoaded                      = true;
            }
            catch (System.Runtime.Serialization.SerializationException ex)
            {
                MessageBox.Show("Could not open the analysis file.  The file is corrupt. " + ex.Message);             
            }
            catch (Exception ex)
            {
                MessageBox.Show("Could not open the analysis file. " + ex.Message);                
            }
            finally
            {
                Invoke(new MethodInvoker(InvokeHideStatus));
            }

            if (fileLoaded && analysis != null)
            {
                if (InvokeRequired)
                {
                    BeginInvoke(new DelegateAnalysisLoaded(AddAnalysis), new object[] { analysis });
                }
                else
                {
                    AddAnalysis(analysis);
                }
            }
        }
        /// <summary>
        /// Handles progress events from the MultiAlign binary file reader.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void reader_Progress(object sender, IOProgressEventArgs e)
        {
            if (m_statusForm.mevntPercentComplete != null)
                m_statusForm.mevntPercentComplete(e.Percent);

            if (m_statusForm.mevntStatusMessage != null)
                m_statusForm.mevntStatusMessage(0, e.Message);
        }
        #endregion

        #region Form Event Handlers
        /// <summary>
        /// Handles when the main form loads so that we can setup the UI for the user.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MainWindowLoad(object sender, EventArgs e)
        {            
            /// 
            /// Get and display the version number to the screen
            /// 
            System.Reflection.Assembly assembly = System.Reflection.Assembly.GetExecutingAssembly();
            System.Reflection.AssemblyName assemblyName = assembly.GetName();
            string versionString = assemblyName.Version.ToString();

            Text = string.Format("MultiAlign [v.{0}]", versionString);
        }
        /// <summary>
        /// Displays the about form to the user.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmAbout mfrmAbout = new frmAbout();
            mfrmAbout.Show();
        }
        private void reportABugOrFeatureToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmTracWebBugReport mfrmTracWeb = new frmTracWebBugReport();
            mfrmTracWeb.Show();
        }
        protected override void OnMdiChildActivate(EventArgs e)
        {
            ToolStripManager.RevertMerge(this.mainToolStrip);
            base.OnMdiChildActivate(e);
        }
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            mainToolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }
        #endregion
    }
}
